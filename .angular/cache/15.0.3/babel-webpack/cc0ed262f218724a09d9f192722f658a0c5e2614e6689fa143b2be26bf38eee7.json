{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CartComponent = class CartComponent {\n  constructor() {\n    // when components load, get cart from local storage\n    this.cart = JSON.parse(localStorage.getItem('cart') || '[]');\n    this.total = this.calculateTotal(this.cart);\n    //localStorage.setItem('cart', '[]');\n    console.table(this.cart);\n  }\n  ngOnInit() {}\n  addToCart(product) {\n    let cart = [];\n    cart = JSON.parse(localStorage.getItem('cart') || `[]`);\n    console.log(cart);\n    let item = cart.find(item => item.id === product.id);\n    if (item) {\n      item.name = product.name;\n      item.quantity += 1;\n      item.price = product.price;\n    } else {\n      cart.push({\n        id: product.id,\n        name: product.name,\n        quantity: 1,\n        price: product.price\n      });\n    }\n    console.table(cart);\n    localStorage.setItem('cart', JSON.stringify(cart));\n    this.cart = cart;\n    this.total = this.calculateTotal(this.cart);\n  }\n  removeFromCart(product) {\n    let cart = [];\n    cart = JSON.parse(localStorage.getItem('cart') || `[]`);\n    let item = cart.find(item => item.id === product.id);\n    if (item) {\n      item.quantity -= 1;\n      if (item.quantity <= 0) {\n        cart = cart.filter(item => item.id !== product.id);\n      }\n    }\n    console.table(cart);\n    localStorage.setItem('cart', JSON.stringify(cart));\n    this.cart = cart;\n    this.total = this.calculateTotal(this.cart);\n  }\n  calculateTotal(cart) {\n    let total = 0;\n    for (let item of cart) {\n      total += item.price * item.quantity;\n    }\n    return total;\n  }\n};\nCartComponent = __decorate([Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})], CartComponent);\nexport { CartComponent };","map":{"version":3,"mappings":"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","names":["Component","CartComponent","constructor","JSON","parse","localStorage","getItem","calculateTotal","cart","console","table","ngOnInit","addToCart","product","log","item","find","id","name","quantity","price","push","setItem","stringify","total","removeFromCart","filter","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/adrian-paulcarrieres/Documents/Efrei/Angular/my-shop/src/app/cart/cart.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\nimport { Product } from '../models/product';\n\n@Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})\nexport class CartComponent {\n  // when components load, get cart from local storage\n  cart = JSON.parse(localStorage.getItem('cart') || '[]');\n  total = this.calculateTotal(this.cart);\n \n  constructor() {\n    //localStorage.setItem('cart', '[]');\n    console.table(this.cart);\n   }\n\n  ngOnInit(): void { }\n\n  addToCart(product: Product) {\n    let cart = [];\n\n    cart = JSON.parse(localStorage.getItem('cart') || `[]`);\n\n    console.log(cart);\n\n    let item = cart.find((item: any) => item.id === product.id);\n    if (item) {\n      item.name = product.name;\n      item.quantity += 1;\n      item.price = product.price;\n    } else {\n      cart.push({\n        id: product.id,\n        name: product.name,\n        quantity: 1,\n        price: product.price,\n      });\n    }\n\n    console.table(cart);\n\n    localStorage.setItem('cart', JSON.stringify(cart));\n\n    this.cart = cart;\n\n    this.total = this.calculateTotal(this.cart);\n  }\n\n  removeFromCart(product: Product) {\n    let cart = [];\n    cart = JSON.parse(localStorage.getItem('cart') || `[]`);\n\n    let item = cart.find((item: any) => item.id === product.id);\n    if (item) {\n      item.quantity -= 1;\n      if (item.quantity <= 0) {\n        cart = cart.filter((item: any) => item.id !== product.id);\n      }\n    }\n\n    console.table(cart);\n\n    localStorage.setItem('cart', JSON.stringify(cart));\n\n    this.cart = cart;\n\n    this.total = this.calculateTotal(this.cart);\n  }\n\n  calculateTotal(cart: any) {\n    let total = 0;\n    for (let item of cart) {\n      total += item.price * item.quantity;\n    }\n    return total;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}